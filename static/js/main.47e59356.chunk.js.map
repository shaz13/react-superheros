{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","class","src","hero","images","md","alt","name","biography","alignment","fullName","CardList","console","log","className","heros","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","setState","this","filteredHeros","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAEaA,G,MAAO,SAAAC,GAAK,OAEvB,yBAAKC,MAAM,QACT,yBAAKA,MAAM,SACT,yBAAKC,IAAKF,EAAMG,KAAKC,OAAOC,GAAIC,IAAKN,EAAMG,KAAKI,QAElD,yBAAKN,MAAM,WACT,4BACGD,EAAMG,KAAKI,KACZ,6CAAmBP,EAAMG,KAAKK,UAAUC,WACxC,6CAAmBT,EAAMG,KAAKK,UAAUE,eCPnCC,G,MAAW,SAAAX,GAEtB,OADAY,QAAQC,IAAIb,GAEV,yBAAKc,UAAU,aACZd,EAAMe,MAAMC,KAAI,SAAAb,GAAI,OACnB,kBAAC,EAAD,CAAMc,IAAKd,EAAKe,GAAIf,KAAMA,UCPrBgB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAEnB,2BACEP,UAAU,SACVQ,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6BHG,G,kBA/Bb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXV,MAAO,GACPW,YAAa,IAJH,E,iFAOO,IAAD,OAClBC,MAAM,kEACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GAAK,OAAI,EAAKgB,SAAS,CAAEhB,MAAOA,S,+BAEhC,IAAD,SACwBiB,KAAKP,MAA5BV,EADD,EACCA,MAAOW,EADR,EACQA,YACTO,EAAgBlB,EAAMmB,QAAO,SAAA/B,GAAI,OACrCA,EAAKI,KAAK4B,cAAcC,SAASV,EAAYS,kBAG/C,OACE,yBAAKrB,UAAU,OACb,wDACA,kBAAC,EAAD,CACEM,YAAY,oBACZC,aAAc,SAAAgB,GAAC,OAAI,EAAKN,SAAS,CAAEL,YAAaW,EAAEC,OAAOC,WAE3D,kBAAC,EAAD,CAAUxB,MAAOkB,S,GA1BPO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.47e59356.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./card.css\";\nexport const Card = props => (\n\n  <div class=\"card\">\n    <div class=\"imgBx\">\n      <img src={props.hero.images.md} alt={props.hero.name} />\n    </div>\n    <div class=\"details\">\n      <h2>\n        {props.hero.name}\n        <span>Alignment : {props.hero.biography.alignment}</span>\n        <span>Full Name : {props.hero.biography.fullName}</span>\n\n\n      </h2>\n    </div>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport { Card } from \"../card/card\";\n\nimport \"./card-list.styles.css\";\n\nexport const CardList = props => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {props.heros.map(hero => (\n        <Card key={hero.id} hero={hero} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n\n);\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      heros: [],\n      searchField: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json\")\n      .then(response => response.json())\n      .then(heros => this.setState({ heros: heros }));\n  }\n  render() {\n    const { heros, searchField } = this.state;\n    const filteredHeros = heros.filter(hero =>\n      hero.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Enhanced Humans Database</h1>\n        <SearchBox\n          placeholder=\"Search Characters\"\n          handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <CardList heros={filteredHeros}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}